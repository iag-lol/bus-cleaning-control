version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: bus-cleaning-db
    environment:
      POSTGRES_DB: bus_cleaning
      POSTGRES_USER: buscontrol
      POSTGRES_PASSWORD: buscontrol123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U buscontrol"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bus-network

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: bus-cleaning-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bus-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bus-cleaning-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://buscontrol:buscontrol123@db:5432/bus_cleaning
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
      - BACKEND_CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - ML_USE_DUMMY=true
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        pip install -r requirements.txt &&
        python -m app.scripts.create_admin &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - bus-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bus-cleaning-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - backend
    networks:
      - bus-network

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  bus-network:
    driver: bridge
